name: 'Elm'
scopeName: 'source.elm'
type: 'tree-sitter'
parser: 'tree-sitter-elm'

fileTypes: [
  'elm'
]

comments:
  start: '-- '

folds: [
  {
    type: 'block_comment'
  }
  {
    type: 'if_else_expr'
  }
  {
    type: 'value_declaration'
  }
  {
    type: 'case_of_expr'
  }
  {
    type: 'type_annotation'
  }
]

scopes:
    # 'source_file': 'source.elm'
    'file': 'source.elm'

    'line_comment': 'comment.line'
    'block_comment': 'comment.block'

    'union_variant > upper_case_identifier' : 'support.type.union'

    'upper_case_identifier' : [
      {match: '^(True|False)$', scopes: 'constant.boolean'},
      {match: '^[A-Z\\d_]{2,}$', scopes: 'constant.other'},
      'support.type.other'
    ]

    '''
    type_annotation > lower_case_identifier,
    exposing_list > exposed_value > lower_case_identifier,
    function_declaration_left > lower_case_identifier,
    ''' : 'entity.name.function.def'

    '''
    function_call_expr > value_expr:nth-child(0) > value_qid > lower_case_identifier,
    ''' : 'entity.name.function.call'

    '''
    function_declaration_left > lower_pattern > lower_case_identifier,
    anonymous_function_expr > pattern > lower_pattern > lower_case_identifier,
    ''' : 'entity.name.variable.parameter'

    '''
    exposing_list > exposed_type > upper_case_identifier,
    type_alias_declaration > upper_case_identifier,
    type_declaration > upper_case_identifier,
    type_expression > type_ref > upper_case_qid > upper_case_identifier,
    type_annotation > type_expression > type_ref > upper_case_qid > upper_case_identifier,
    ''' : 'support.type.other'

    '''
    module_declaration > upper_case_qid > upper_case_identifier,
    import_clause > upper_case_qid > upper_case_identifier,
    function_call_expr > value_expr > value_qid > upper_case_identifier,
    ''' : 'support.module'

    '''
    field > lower_case_identifier,
    field_type > lower_case_identifier,
    ''' : 'entity.name.variable.field'

    'alias'    : 'storage.modifier.alias'
    'type'     : 'storage.modifier.ktype'
    'module'   : 'storage.modifier.module'
    'exposing' : 'storage.modifier.exposing'
    'effect'   : 'storage.modifier.effect'
    'let > "let"'    : 'storage.modifier.let'

    'import' : 'keyword.control.import'
    'case'   : 'keyword.control.case'
    'of'     : 'keyword.control.of'
    'where'  : 'keyword.control.where'
    'infix'  : 'keyword.control.infix'
    'if > "if"'       : 'keyword.control.if'
    'in > "in"'       : 'keyword.control.in'
    'then > "then"'   : 'keyword.control.then'
    '''
    if_else_expr > "else",
    else > "else"
    ''' : 'keyword.control.else'

    'arrow' : 'keyword.operator.arrow'
    'pipe'  : 'keyword.operator.pipe'
    'colon' : 'keyword.operator.colon'
    'as'    : 'keyword.operator.as'
    'eq'    : 'keyword.operator.assign'
    '"not"' : 'keyword.operator.not'
    'cons_pattern > "::"' : 'keyword.operator.cons'
    'exposing_list > double_dot' : 'keyword.operator.twodots'
    'operator_identifier' : 'keyword.operator.other'

    'string_constant_expr' : 'string.quoted.double'
    'char_constant_expr'   : 'string.quoted.single'
    'number_literal'       : 'constant.number'
